{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/Search/index.js","components/Gender/index.js","components/EmployeeList/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","children","className","Title","Search","employees","updateEmps","useState","searchInput","updateSearchInput","useEffect","filteredEmployees","filter","name","first","toLowerCase","indexOf","id","value","type","placeholder","onChange","e","target","Gender","gender","isMale","icon","faMale","faFemale","EmployeeList","sortedEmployees","updateSortedEmployees","scope","onClick","updateSort","sort","a","b","nameA","nameB","map","thumbnail","picture","cell","phone","email","last","username","login","key","src","alt","axios","get","App","updateEmployees","employeesDataSet","updateEmployeesDataSet","API","then","results","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.086cbcc6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport default function Wrapper({ children }) {\r\n  return <div className=\"wrapper\">{ children }</div>;\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nexport default function Title() {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <div className=\"container\">\r\n        <center>\r\n          <h1 className=\"display-4\">Employee Directory</h1>\r\n          <p className=\"lead\">Search the directory by First or Last Name using the Search box.\r\n          <br></br>Sort columns by clicking on the heading.</p>\r\n        </center>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function Search({ employees, updateEmps }) {\r\n    const [searchInput, updateSearchInput ] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const filteredEmployees =\r\n        searchInput === \"\" ? employees : employees.filter(({ name: { first } }) =>\r\n                  first.toLowerCase().indexOf(searchInput.toLowerCase()) >= 0\r\n              );\r\n    \r\n        updateEmps(filteredEmployees);\r\n      }, [searchInput, employees, updateEmps]);\r\n\r\n\r\n    return (\r\n        <div>\r\n        <center>\r\n            <div className=\"input-group input-group-lg w-25\">\r\n                <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\" id=\"inputGroup-sizing-lg\">Search</span>\r\n                </div>\r\n                <input value={searchInput} type=\"text\" className=\"form-control\" placeholder=\"type first/last name\" onChange={e => updateSearchInput(e.target.value)}></input>\r\n            </div>\r\n        </center>\r\n        <br></br>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMale, faFemale } from '@fortawesome/free-solid-svg-icons'\r\nimport './style.css';\r\n\r\nexport default function Gender(gender) {\r\n\r\n    let isMale = false;\r\n\r\n    if (gender.gender === \"male\") {\r\n        isMale = true;\r\n    }\r\n\r\n    return (\r\n        <td>\r\n          { isMale\r\n            ? <FontAwesomeIcon icon={faMale} className=\"male\" />\r\n            : <FontAwesomeIcon icon={faFemale} className=\"female\" />\r\n          }\r\n        </td>\r\n    )\r\n}","import React, { useState, useEffect }  from \"react\";\r\nimport Gender from '../Gender';\r\n\r\nexport default function EmployeeList({ employees }) {\r\n  const [sortedEmployees, updateSortedEmployees] = useState([]);\r\n\r\n  useEffect(() => \r\n    updateSortedEmployees(employees), [employees]\r\n  );\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\"></th>\r\n            <th scope=\"col\">User Name</th>\r\n            <th scope=\"col\"\r\n              onClick={() => {\r\n                const employeesCopy = [...employees];\r\n                const updateSort = employeesCopy.sort((a, b) => {\r\n                  const nameA = a.name.first;\r\n                  const nameB = b.name.first;\r\n\r\n                  if (nameA < nameB) {\r\n                    return -1;\r\n                  }\r\n                  if (nameA > nameB) {\r\n                    return 1;\r\n                  }\r\n                  return 0;\r\n                });\r\n                updateSortedEmployees(updateSort);\r\n              }}\r\n            >First</th>\r\n            <th scope=\"col\">Last</th>\r\n            <th scope=\"col\">Main Phone</th>\r\n            <th scope=\"col\">Mobile Phone</th>\r\n            <th scope=\"col\">Email</th>\r\n            <th scope=\"col\"></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {sortedEmployees.map(\r\n            ({\r\n              picture: { thumbnail },\r\n              cell,\r\n              phone,\r\n              gender,\r\n              email,\r\n              name: { first, last },\r\n              login: { username }\r\n            }) => (\r\n              <tr key={email}>\r\n                <td>\r\n                  <img src={thumbnail} alt=\"employeePhoto\"></img>\r\n                </td>\r\n                <td>{username}</td>\r\n                <th>{first}</th>\r\n                <th>{last}</th>\r\n                <td>{phone}</td>\r\n                <td>{cell}</td>\r\n                <td>{email}</td>\r\n                <Gender gender={gender}/>\r\n                <td></td>\r\n              </tr>\r\n            )\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","// code from instructor to get random employee list\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function() {\r\n\r\n    return axios.get(\"https://randomuser.me/api/?results=20&nat=us\");\r\n  }\r\n\r\n};\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper';\nimport Title from './components/Title';\nimport Search from './components/Search';\nimport EmployeeList from './components/EmployeeList';\nimport API from \"./utils/API\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  const [employees, updateEmployees] = useState([]);\n  const [employeesDataSet, updateEmployeesDataSet] = useState([]);\n\n  useEffect(() => {\n    API.getUsers()\n    .then(({ data: { results } }) => updateEmployees(results));\n  }, []);\n\n  return (\n    <Wrapper>\n      <Title />\n      <Search employees={employees} updateEmps={updateEmployeesDataSet}/>\n      <EmployeeList employees={employeesDataSet} />\n    </Wrapper>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}