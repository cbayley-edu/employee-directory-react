{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/Search/index.js","components/Headings/index.js","components/EmployeeCard/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Title","Search","id","type","placeholder","Headings","scope","EmployeeCard","getUsers","axios","get","App","emps","useState","employees","empData","setEmpData","sortByName","a","b","nameA","name","first","toLowerCase","nameB","comparison","handleChange","e","preventDefault","search","target","value","newEmployees","filter","employee","slice","length","last","onClick","sort","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTAGe,SAASA,EAAQC,GAC9B,OAAO,yBAAKC,UAAU,WAAWD,EAAME,UCF1B,SAASC,IACtB,OACE,yBAAKF,UAAU,aACb,yBAAKA,UAAU,aACb,gCACE,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,QAAb,mEACA,6BADA,+CCNK,SAASG,IACtB,OACE,6BACE,gCACE,yBAAKH,UAAU,mCACX,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,mBAAmBI,GAAG,wBAAtC,WAEF,2BAAOC,KAAK,OAAOL,UAAU,eAAeM,YAAY,2BAG9D,8BCXS,SAASC,IACtB,OACE,6BACE,2BAAOP,UAAU,SACf,+BACI,4BACA,wBAAIQ,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,aCZG,SAASC,EAAaV,GACnC,OACE,yBAAKC,UAAU,QACb,4C,qBCFS,GAEbU,SAAU,WAER,OAAOC,IAAMC,IAAI,mD,MCwDNC,MApDf,WAEE,IAAMC,EAAOJ,EAFA,EAImBK,mBAAS,CACvCC,UAAWF,IALA,mBAILG,EAJK,KAIIC,EAJJ,KAOLF,EAAcC,EAAdD,UAsBR,SAASG,EAAYC,EAAGC,GACtB,IAAMC,EAAQF,EAAEG,KAAKC,MAAMC,cACrBC,EAAQL,EAAEE,KAAKC,MAAMC,cAEvBE,EAAa,EAMjB,OALIL,EAAQI,EACVC,EAAa,EACJL,EAAQI,IACjBC,GAAc,GAETA,EAGT,OACE,kBAAC7B,EAAD,KACE,kBAACI,EAAD,MACA,kBAACC,EAAD,CAAQyB,aApCS,SAACC,GACpBA,EAAEC,iBACF,IAAMC,EAASF,EAAEG,OAAOC,MAAMR,cAC1BS,EAAe,GAEjBA,EADc,KAAXH,EACYjB,EAAKqB,QAAO,SAAAC,GACzB,OACEL,IAAWK,EAASb,KAAKC,MAAMC,cAAcY,MAAM,EAAGN,EAAOO,SAC7DP,IAAWK,EAASb,KAAKgB,KAAKd,cAAcY,MAAM,EAAGN,EAAOO,WAEjDxB,EAEjBI,EAAW,CAAEF,UAAWkB,OAyBtB,kBAAC3B,EAAD,MACA,kBAACE,EAAD,CAAcO,UAAWA,EAAWwB,QAvBlB,WAEpBtB,EAAW,CAAEF,UAAWA,EAAUyB,KAAKtB,UCzBvBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3690fadc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport default function Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nexport default function Title() {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <div className=\"container\">\r\n        <center>\r\n          <h1 className=\"display-4\">Employee Directory</h1>\r\n          <p className=\"lead\">Search the directory by First or Last Name using the Search box.\r\n          <br></br>Sort columns by clicking on the heading.</p>\r\n        </center>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Search() {\r\n  return (\r\n    <div>\r\n      <center>\r\n        <div className=\"input-group input-group-lg w-25\">\r\n            <div className=\"input-group-prepend\">\r\n              <span className=\"input-group-text\" id=\"inputGroup-sizing-lg\">Search</span>\r\n            </div>\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"type first/last name\"></input>\r\n        </div>\r\n      </center>\r\n      <br></br>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Headings() {\r\n  return (\r\n    <div>\r\n      <table className=\"table\">\r\n        <thead>\r\n            <tr>\r\n            <th scope=\"col\">Image</th>\r\n            <th scope=\"col\">User Name</th>\r\n            <th scope=\"col\">First</th>\r\n            <th scope=\"col\">Last</th>\r\n            <th scope=\"col\">Gender</th>\r\n            <th scope=\"col\">Phone</th>\r\n            <th scope=\"col\">Email</th>\r\n            </tr>\r\n        </thead>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function EmployeeCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <p>EmployeeCard</p>\r\n    </div>\r\n  );\r\n}\r\n","// code from instructor to get random employee list\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function() {\r\n\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};","import React, { useState } from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper';\nimport Title from './components/Title';\nimport Search from './components/Search';\nimport Headings from './components/Headings';\nimport EmployeeCard from './components/EmployeeCard';\nimport getUsers from \"./utils/API\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n\n  const emps = getUsers;\n\n  const [ empData, setEmpData ] = useState({\n    employees: emps\n  })\n  const { employees } = empData\n\n  const handleChange = (e) => {\n    e.preventDefault();\n    const search = e.target.value.toLowerCase();\n    let newEmployees = [];\n    if ( search !== \"\") {\n      newEmployees = emps.filter(employee => {\n        return (\n          search === employee.name.first.toLowerCase().slice(0, search.length) || \n          search === employee.name.last.toLowerCase().slice(0, search.length))})\n    } else {\n      newEmployees = emps;\n    }\n    setEmpData({ employees: newEmployees })\n  }\n\n  const handleOnClick = () => {\n\n    setEmpData({ employees: employees.sort(sortByName)})\n  }\n\n  function sortByName( a, b ) {\n    const nameA = a.name.first.toLowerCase();\n    const nameB = b.name.first.toLowerCase();\n\n    let comparison = 0;\n    if (nameA > nameB) {\n      comparison = 1;\n    } else if (nameA < nameB) {\n      comparison = -1;\n    }\n    return comparison\n  }\n\n  return (\n    <Wrapper>\n      <Title />\n      <Search handleChange={handleChange}/>\n      <Headings />\n      <EmployeeCard employees={employees} onClick={handleOnClick} />\n    </Wrapper>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}